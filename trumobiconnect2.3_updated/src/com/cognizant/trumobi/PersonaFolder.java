/*
 * Copyright (C) 2008 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.cognizant.trumobi;


import android.content.Context;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Resources;
import android.graphics.Rect;
import android.graphics.Typeface;
import android.util.AttributeSet;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.AbsListView;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.LinearLayout;

import com.cognizant.trumobi.R;

/**
 * Represents a set of icons chosen by the user or generated by the system.
 */
public class PersonaFolder extends LinearLayout implements PersonaDragSource, OnItemLongClickListener,
        OnItemClickListener, OnClickListener, View.OnLongClickListener {

    protected AbsListView mContent;
    protected PersonaDragController mDragger;
    
    protected PersonaLauncher mLauncher;

    protected Button mCloseButton;
    
    protected PersonaFolderInfo mInfo;
    
    /**
     * Which item is being dragged
     */
    protected PersonaApplicationInfo mDragItem;
    /**
     * ADW:Theme vars
     */
    private int mTextColor=0;
    @SuppressWarnings("unused")
	private boolean useThemeTextColor=false;

    /**
     * Used to inflate the PersonaWorkspace from XML.
     *
     * @param context The application's context.
     * @param attrs The attribtues set containing the PersonaWorkspace's customization values.
     */
    public PersonaFolder(Context context, AttributeSet attrs) {
        super(context, attrs);
        setAlwaysDrawnWithCacheEnabled(false);
    }

    @Override
    protected void onFinishInflate() {
        super.onFinishInflate();

        mContent = (AbsListView) findViewById(R.id.folder_content);
        mContent.setOnItemClickListener(this);
        mContent.setOnItemLongClickListener(this);
        
        mCloseButton = (Button) findViewById(R.id.folder_close);
        mCloseButton.setOnClickListener(this);
        mCloseButton.setOnLongClickListener(this);
    	//ADW: Load the specified theme
    	String themePackage=PersonaAlmostNexusSettingsHelper.getThemePackageName(getContext(), PersonaLauncher.THEME_DEFAULT);
    	PackageManager pm=getContext().getPackageManager();
    	Resources themeResources=null;
    	if(!themePackage.equals(PersonaLauncher.THEME_DEFAULT)){
	    	try {
				themeResources=pm.getResourcesForApplication(themePackage);
			} catch (NameNotFoundException e) {
				// TODO Auto-generated catch block
				//e.printStackTrace();
			}
    	}
		if(themeResources!=null){
			//Action Buttons
			PersonaLauncher.loadThemeResource(themeResources,themePackage,"box_launcher_top",mCloseButton,PersonaLauncher.THEME_ITEM_BACKGROUND);
			PersonaLauncher.loadThemeResource(themeResources,themePackage,"box_launcher_bottom",mContent,PersonaLauncher.THEME_ITEM_BACKGROUND);
			int grid_selector_id=themeResources.getIdentifier("grid_selector", "drawable", themePackage);
			if(grid_selector_id!=0){
				mContent.setSelector(themeResources.getDrawable(grid_selector_id));
			}
			int textColorId=themeResources.getIdentifier("folder_title_color", "color", themePackage);
			if(textColorId!=0){
				mTextColor=themeResources.getColor(textColorId);
				mCloseButton.setTextColor(mTextColor);
			}
			Typeface themeFont=null;
			try{
				themeFont=Typeface.createFromAsset(themeResources.getAssets(), "themefont.ttf");
			}catch (RuntimeException e) {
				// TODO: handle exception
			}
			if(themeFont!=null)mCloseButton.setTypeface(themeFont);
		}
        
    }
    
    @SuppressWarnings("rawtypes")
	public void onItemClick(AdapterView parent, View v, int position, long id) {
        PersonaApplicationInfo app = (PersonaApplicationInfo) parent.getItemAtPosition(position);
		// set bound
		if (v != null) {
		    Rect targetRect = new Rect();
		    v.getGlobalVisibleRect(targetRect);
		    try{
		    	app.intent.setSourceBounds(targetRect);
		    }catch(NoSuchMethodError e){};
		}        
        mLauncher.startActivitySafely(app.intent);
        if (mLauncher.autoCloseFolder) {
            mLauncher.closeFolder(this);
        }
    }

    public void onClick(View v) {
        mLauncher.closeFolder(this);
    }

    public boolean onLongClick(View v) {
        mLauncher.closeFolder(this);
        mLauncher.showRenameDialog(mInfo);
        return true;
    }

    public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
        if (!view.isInTouchMode()) {
            return false;
        }

        PersonaApplicationInfo app = (PersonaApplicationInfo) parent.getItemAtPosition(position);

        mDragger.startDrag(view, this, app, PersonaDragController.DRAG_ACTION_COPY);
        mLauncher.closeFolder(this);
        mDragItem = app;

        return true;
    }

    public void setDragger(PersonaDragController dragger) {
        mDragger = dragger;
    }

    public void onDropCompleted(View target, boolean success) {
    }

    /**
     * Sets the adapter used to populate the content area. The adapter must only
     * contains PersonaApplicationInfo items.
     *
     * @param adapter The list of applications to display in the folder.
     */
    void setContentAdapter(BaseAdapter adapter) {
        mContent.setAdapter(adapter);
    }

    void notifyDataSetChanged() {
        ((BaseAdapter) mContent.getAdapter()).notifyDataSetChanged();
    }

    void setLauncher(PersonaLauncher personaLauncher) {
        mLauncher = personaLauncher;
    }
    
    /**
     * @return the PersonaFolderInfo object associated with this folder
     */
    PersonaFolderInfo getInfo() {
        return mInfo;
    }

    // When the folder opens, we need to refresh the GridView's selection by
    // forcing a layout
    void onOpen() {
        mContent.requestLayout();
    }

    void onClose() {
        final PersonaWorkspace personaWorkspace = mLauncher.getWorkspace();
        personaWorkspace.getChildAt(personaWorkspace.getCurrentScreen()).requestFocus();
    }

    void bind(PersonaFolderInfo info) {
        mInfo = info;
        mCloseButton.setText(info.title);
    }
}
